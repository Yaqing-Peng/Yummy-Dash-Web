{"remainingRequest":"/Users/jasmine/Desktop/projects/vue-proj/yummy-dash-admin-vue-ts/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jasmine/Desktop/projects/vue-proj/yummy-dash-admin-vue-ts/src/views/employee/addEmployee.vue?vue&type=script&lang=ts","dependencies":[{"path":"/Users/jasmine/Desktop/projects/vue-proj/yummy-dash-admin-vue-ts/src/views/employee/addEmployee.vue","mtime":1711672926410},{"path":"/Users/jasmine/Desktop/projects/vue-proj/yummy-dash-admin-vue-ts/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jasmine/Desktop/projects/vue-proj/yummy-dash-admin-vue-ts/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/jasmine/Desktop/projects/vue-proj/yummy-dash-admin-vue-ts/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/jasmine/Desktop/projects/vue-proj/yummy-dash-admin-vue-ts/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jasmine/Desktop/projects/vue-proj/yummy-dash-admin-vue-ts/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\r\nimport {addEmployee,queryEmployeeById,updateEmployee} from '@/api/employee'\r\nimport router from '@/router';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      optType: '',//edit or update\r\n      ruleForm: {\r\n        name: '',\r\n        username: '',\r\n        sex: '1',\r\n        phone: '',\r\n        idNumber: ''\r\n      },\r\n      rules: {\r\n        name: [\r\n            { required: true, message: 'Please input employee name', trigger: 'blur' }\r\n        ],\r\n        username: [\r\n            { required: true, message: 'Please input username', trigger: 'blur' }\r\n        ],\r\n        phone: [\r\n          { required: true, trigger: 'blur',validator: (rule,value,callback) => {\r\n              if(value === '' || (!/^1(3|4|5|6|7|8)\\d{9}$/.test(value))){\r\n                callback(new Error('Please input correct phone number！'))\r\n              }else{\r\n                callback()\r\n              }\r\n            } \r\n          }\r\n        ],\r\n        idNumber: [\r\n          { required: true, trigger: 'blur',validator: (rule,value,callback) => {\r\n              if(value === '' || (!/(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(X|x)$)/.test(value))){\r\n                callback(new Error('Please input correct phone number！'))\r\n              }else{\r\n                callback()\r\n              }\r\n            } \r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    //get route param, if exists, it an update operation\r\n    this.optType = this.$route.query.id ? 'update' : 'add'\r\n    if(this.optType === 'update') {\r\n      //get emp info back to page\r\n      queryEmployeeById(this.$route.query.id).then(res => {\r\n        if(res.data.code === 1){\r\n          this.ruleForm = res.data.data\r\n        }\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n    submitForm(formName,isContinue){\r\n      //form validation\r\n      this.$refs[formName].validate((valid) => {\r\n        if(valid) {\r\n          //request server based on opt type\r\n          if(this.optType === 'add'){//add\r\n            addEmployee(this.ruleForm).then((res) => {\r\n                if(res.data.code === 1){\r\n                  this.$message.success('Employee added successfully！')\r\n                  if(isContinue){\r\n                  this.ruleForm = {\r\n                      name: '',\r\n                      username: '',\r\n                      sex: '1',\r\n                      phone: '',\r\n                      idNumber: ''\r\n                    }\r\n                  }else {\r\n                    this.$router.push('/employee')\r\n                  }\r\n                }else {\r\n                  this.$message.error(res.data.msg)\r\n                }\r\n              })\r\n          }else{//update\r\n            updateEmployee(this.ruleForm).then(res => {\r\n              if(res.data.code === 1){\r\n                this.$message.success('Employee updated successfully！')\r\n                this.$router.push('/employee')\r\n              }\r\n            })\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["addEmployee.vue"],"names":[],"mappings":";AAmCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"addEmployee.vue","sourceRoot":"src/views/employee","sourcesContent":["<template>\r\n  <div class=\"addBrand-container\">\r\n    <div class=\"container\">\r\n      <el-form :model=\"ruleForm\" :rules=\"rules\" ref=\"ruleForm\" label-width=\"180px\">\r\n        <el-form-item label=\"User Name\" prop=\"username\">\r\n          <el-input v-model=\"ruleForm.username\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Employee Name\" prop=\"name\">\r\n          <el-input v-model=\"ruleForm.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Phone\" prop=\"phone\">\r\n          <el-input v-model=\"ruleForm.phone\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"Gender\" prop=\"sex\">\r\n            <el-radio v-model=\"ruleForm.sex\" label=\"1\">Male</el-radio>\r\n            <el-radio v-model=\"ruleForm.sex\" label=\"2\">Female</el-radio>\r\n        </el-form-item>\r\n        <el-form-item label=\"ID\" prop=\"idNumber\">\r\n          <el-input v-model=\"ruleForm.idNumber\"></el-input>\r\n        </el-form-item>\r\n        <div class=\"subBox\">\r\n          <el-button type=\"primary\" @click=\"submitForm('ruleForm',false)\">Save</el-button>\r\n          <el-button \r\n            v-if=\"this.optType === 'add'\" \r\n            type=\"primary\" \r\n            @click=\"submitForm('ruleForm',true)\">Save and Continue Add\r\n          </el-button>\r\n          <el-button @click=\"() => this.$router.push('/employee')\">Return</el-button>\r\n        </div>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport {addEmployee,queryEmployeeById,updateEmployee} from '@/api/employee'\r\nimport router from '@/router';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      optType: '',//edit or update\r\n      ruleForm: {\r\n        name: '',\r\n        username: '',\r\n        sex: '1',\r\n        phone: '',\r\n        idNumber: ''\r\n      },\r\n      rules: {\r\n        name: [\r\n            { required: true, message: 'Please input employee name', trigger: 'blur' }\r\n        ],\r\n        username: [\r\n            { required: true, message: 'Please input username', trigger: 'blur' }\r\n        ],\r\n        phone: [\r\n          { required: true, trigger: 'blur',validator: (rule,value,callback) => {\r\n              if(value === '' || (!/^1(3|4|5|6|7|8)\\d{9}$/.test(value))){\r\n                callback(new Error('Please input correct phone number！'))\r\n              }else{\r\n                callback()\r\n              }\r\n            } \r\n          }\r\n        ],\r\n        idNumber: [\r\n          { required: true, trigger: 'blur',validator: (rule,value,callback) => {\r\n              if(value === '' || (!/(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(X|x)$)/.test(value))){\r\n                callback(new Error('Please input correct phone number！'))\r\n              }else{\r\n                callback()\r\n              }\r\n            } \r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    //get route param, if exists, it an update operation\r\n    this.optType = this.$route.query.id ? 'update' : 'add'\r\n    if(this.optType === 'update') {\r\n      //get emp info back to page\r\n      queryEmployeeById(this.$route.query.id).then(res => {\r\n        if(res.data.code === 1){\r\n          this.ruleForm = res.data.data\r\n        }\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n    submitForm(formName,isContinue){\r\n      //form validation\r\n      this.$refs[formName].validate((valid) => {\r\n        if(valid) {\r\n          //request server based on opt type\r\n          if(this.optType === 'add'){//add\r\n            addEmployee(this.ruleForm).then((res) => {\r\n                if(res.data.code === 1){\r\n                  this.$message.success('Employee added successfully！')\r\n                  if(isContinue){\r\n                  this.ruleForm = {\r\n                      name: '',\r\n                      username: '',\r\n                      sex: '1',\r\n                      phone: '',\r\n                      idNumber: ''\r\n                    }\r\n                  }else {\r\n                    this.$router.push('/employee')\r\n                  }\r\n                }else {\r\n                  this.$message.error(res.data.msg)\r\n                }\r\n              })\r\n          }else{//update\r\n            updateEmployee(this.ruleForm).then(res => {\r\n              if(res.data.code === 1){\r\n                this.$message.success('Employee updated successfully！')\r\n                this.$router.push('/employee')\r\n              }\r\n            })\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.addBrand {\r\n  &-container {\r\n    margin: 30px;\r\n    margin-top: 30px;\r\n    .HeadLable {\r\n      background-color: transparent;\r\n      margin-bottom: 0px;\r\n      padding-left: 0px;\r\n    }\r\n    .container {\r\n      position: relative;\r\n      z-index: 1;\r\n      background: #fff;\r\n      padding: 30px;\r\n      border-radius: 4px;\r\n      // min-height: 500px;\r\n      .subBox {\r\n        padding-top: 30px;\r\n        text-align: center;\r\n        border-top: solid 1px $gray-5;\r\n      }\r\n    }\r\n    .idNumber {\r\n      margin-bottom: 39px;\r\n    }\r\n\r\n    .el-form-item {\r\n      margin-bottom: 29px;\r\n    }\r\n    .el-input {\r\n      width: 293px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n"]}]}